--- a/src/bin/dhcp4/dhcp4_srv.cc
+++ b/src/bin/dhcp4/dhcp4_srv.cc
@@ -1667,7 +1667,8 @@
         // Check the first error case: unknown client. We check this before
         // validating the address sent because we don't want to respond if
         // we don't know this client.
-        if (!lease || !lease->belongsToClient(hwaddr, client_id)) {
+        bool authoritative = CfgMgr::instance().authoritative();
+        if (!authoritative && (!lease || !lease->belongsToClient(hwaddr, client_id))) {
             LOG_DEBUG(bad_packet4_logger, DBG_DHCP4_DETAIL,
                       DHCP4_NO_LEASE_INIT_REBOOT)
                 .arg(query->getLabel())
--- a/src/bin/dhcp4/json_config_parser.cc
+++ b/src/bin/dhcp4/json_config_parser.cc
@@ -193,6 +193,8 @@
             parser = new OptionDataListParser(config_id, options_, AF_INET);
         } else if (config_id.compare("match-client-id") == 0) {
             parser = new BooleanParser(config_id, boolean_values_);
+        } else if (config_id.compare("authoritative") == 0) {
+            parser = new BooleanParser(config_id, boolean_values_);
         } else if (config_id.compare("4o6-subnet") == 0) {
             parser = new StringParser(config_id, string_values_);
         } else if (config_id.compare("4o6-interface") == 0) {
@@ -276,6 +278,24 @@
         // Set the match-client-id value for the subnet.
         subnet4->setMatchClientId(match_client_id.get());
 
+        // authoritative
+        isc::util::OptionalValue<bool> authoritative;
+        try {
+            authoritative = boolean_values_->getParam("authoritative");
+
+        } catch (...) {
+            // Ignore because this parameter is optional and it may be specified
+            // in the global scope.
+        }
+
+        // If the authoritative value wasn't specified as a subnet specific parameter
+        // check if there is global value specified.
+        if (!authoritative.isSpecified()) {
+            // If not specified, use false.
+            authoritative.specify(globalContext()->boolean_values_->
+                                  getOptionalParam("authoritative", true));
+        }
+
         // next-server
         try {
             string next_server = globalContext()->string_values_->getParam("next-server");
@@ -439,6 +459,8 @@
         parser = new HooksLibrariesParser(config_id);
     } else if (config_id.compare("echo-client-id") == 0) {
         parser = new BooleanParser(config_id, globalContext()->boolean_values_);
+    } else if (config_id.compare("authoritative") == 0) {
+        parser = new BooleanParser(config_id, globalContext()->boolean_values_);
     } else if (config_id.compare("dhcp-ddns") == 0) {
         parser = new D2ClientConfigParser(config_id);
     } else if (config_id.compare("match-client-id") == 0) {
@@ -467,6 +489,7 @@
 /// - echo-client-id
 /// - decline-probation-period
 /// - dhcp4o6-port
+/// - authoritative
 void setGlobalParameters4() {
     // Although the function is modest for now, it is certain that the number
     // of global switches will increase over time, hence the name.
@@ -498,6 +521,16 @@
     } catch (...) {
         // Ignore errors. This flag is optional
     }
+
+    // Set the whether v4 server will respond with DHCPNAK to requests with
+    // unknown addresses
+    try {
+        bool authoritative = globalContext()->boolean_values_
+            ->getParam("authoritative");
+        CfgMgr::instance().authoritative(authoritative);
+    } catch (...) {
+        // Ignore errors. This flag is optional
+    }
 }
 
 isc::data::ConstElementPtr
--- a/src/lib/dhcpsrv/cfgmgr.h
+++ b/src/lib/dhcpsrv/cfgmgr.h
@@ -146,6 +146,19 @@
         return (echo_v4_client_id_);
     }
 
+    /// @brief Sets whether server should NAK unknown clients in DHCPv4
+    ///
+    /// @param echo should unknown clients be rejected or not
+    void authoritative(const bool enabled) {
+        authoritative_ = enabled;
+    }
+
+    /// @brief Returns whether server should NAK requests for unknown leases
+    /// @return true if requests for unknown leases should be NAKed, false otherwise
+    bool authoritative() const {
+        return (authoritative_);
+    }
+
     /// @brief Updates the DHCP-DDNS client configuration to the given value.
     ///
     /// @param new_config pointer to the new client configuration.
@@ -348,6 +361,9 @@
     /// Indicates whether v4 server should send back client-id
     bool echo_v4_client_id_;
 
+    /// Indicates whether v4 server should NAK requests for unknown addresses
+    bool authoritative_;
+
     /// @brief Manages the DHCP-DDNS client and its configuration.
     D2ClientMgr d2_client_mgr_;
 
